from abc import ABC, abstractmethod

# Загальний інтерфейс продукту
class Product(ABC):
    @abstractmethod
    def operation(self) -> str:
        pass

# Клас-конкретний продукт 1
class ConcreteProduct1(Product):
    def operation(self) -> str:
        return "ConcreteProduct1"

# Клас-конкретний продукт 2
class ConcreteProduct2(Product):
    def operation(self) -> str:
        return "ConcreteProduct2"

# Клас творця (абстрактний)
class Creator(ABC):
    @abstractmethod
    def factory_method(self) -> Product:
        pass

    def some_operation(self) -> str:
        product = self.factory_method()
        result = f"Creator: {product.operation()}"
        return result

# Клас-конкретний творець 1
class ConcreteCreator1(Creator):
    def factory_method(self) -> Product:
        return ConcreteProduct1()

# Клас-конкретний творець 2
class ConcreteCreator2(Creator):
    def factory_method(self) -> Product:
        return ConcreteProduct2()

# Приклад використання
def client_code(creator: Creator) -> None:
    print(f"Client: I'm not aware of the creator's class, but it still works.\n{creator.some_operation()}\n")

if __name__ == "__main__":
    print("App: Launched with the ConcreteCreator1.")
    client_code(ConcreteCreator1())

    print("App: Launched with the ConcreteCreator2.")
    client_code(ConcreteCreator2())
